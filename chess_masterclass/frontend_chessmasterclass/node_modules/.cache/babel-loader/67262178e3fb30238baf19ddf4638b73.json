{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomas\\\\Desktop\\\\chess-masterclass\\\\backend\\\\chess_masterclass\\\\frontend_chessmasterclass\\\\src\\\\context\\\\UserContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport alertMsg from '../utils/utlis'; // create user context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext(); // create provider\n\nexport const UserContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // lists with user/auth data\n  // check if there are tokens in local storage: if they are overwrite lists \n  let [authTokens, setAuthTokens] = useState(localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : []);\n  let [userInfo, setUserInfo] = useState(localStorage.getItem('authTokens') ? jwt_decode(JSON.parse(localStorage.getItem('authTokens')).access) : []); // func to navigate (ie to homepage)\n\n  const navigate = useNavigate(); // func to login user: from form(onSubmit) in Login.js get username and pass and send it to API. In reverse get tokens (custom one have all needed data)\n\n  let login = async e => {\n    e.preventDefault(); // call to API\n\n    let response = await fetch('http://127.0.0.1:8000/api/token/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'username': e.target.username.value,\n        'password': e.target.password.value\n      })\n    }); // get tokens in reponse\n\n    let data = await response.json(); // if status-200 then set Lists with data and save tokens in localstorage\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUserInfo(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n      navigate('/');\n    } else if (response.status === 401) {\n      console.log('wrong pass or username');\n    } else {\n      console.log('smth went wrong');\n    }\n  }; // update refresh token every 4 mins\n\n\n  let updateTokens = async () => {\n    // call to API\n    let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        'refresh': authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n      })\n    }); // get tokens in reponse\n\n    let data = await response.json(); // if status-200 then set Lists with data and save tokens in localstorage\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUserInfo(jwt_decode(data.access));\n      localStorage.setItem('authTokens', JSON.stringify(data));\n    } // else: smth is wrong and logout\n    else {\n      logout();\n    }\n  }; // logout\n\n\n  let logout = () => {\n    setAuthTokens([]);\n    setUserInfo([]);\n    localStorage.clear();\n    navigate('/');\n  }; // alerts\n\n\n  function alert(text, id) {\n    let passwordDiv = document.querySelector(`#${id}`);\n    let msg = document.createElement('p');\n    msg.innerText = text;\n    msg.style.color = 'red';\n    passwordDiv.appendChild(msg);\n    setTimeout(() => {\n      passwordDiv.removeChild(msg);\n    }, 4000);\n  } // register\n\n\n  let register = async e => {\n    e.preventDefault();\n\n    if (e.target.username.value && e.target.password.value && e.target.password2.value && e.target.email.value) {\n      if (e.target.password.value === e.target.password2.value) {\n        let response = await fetch('http://127.0.0.1:8000/member/api/register/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'username': e.target.username.value,\n            'password': e.target.password.value,\n            'email': e.target.email.value\n          })\n        });\n        let status = await response.json();\n        console.log(status['username']);\n        console.log(status);\n\n        if (status.status === 200 || status.status === 201) {\n          navigate('/');\n        } else if (status['username']) {\n          // alertMsg('username', status['username'][0], 'btn-submit-register')\n          alert(status['username'][0], 'username');\n        } else if (status['email']) {\n          alert(status['email'][0], 'email');\n        } else if (status.password) {\n          status.password[0].forEach(msg => {\n            alert(msg, 'email');\n          });\n        } else {\n          console.log('smth went wrong..');\n        }\n      } else {\n        alert('Passwords are not the same.', 'password2');\n      }\n    } else {\n      alert('Please fill all fields.', 'submit-field');\n    }\n  }; // edit profile\n\n\n  let editProfile = async e => {};\n\n  useEffect(() => {\n    let fourMinutes = 1000 * 4 * 60;\n    let interval = setInterval(() => {\n      updateTokens();\n    }, fourMinutes);\n    return () => clearInterval(interval);\n  }, []); // collection of data to hook between components\n\n  let contextData = {\n    // data\n    userInfo: userInfo,\n    // functions\n    register: register,\n    login: login,\n    logout: logout\n  }; // provider DOM\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserContextProvider, \"tzdWcFL1gLCz1wnMzGX96aOvzrY=\", false, function () {\n  return [useNavigate];\n});\n\n_c = UserContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","useNavigate","jwt_decode","alertMsg","UserContext","UserContextProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","userInfo","setUserInfo","access","navigate","login","e","preventDefault","response","fetch","method","headers","body","stringify","target","username","value","password","data","json","status","setItem","console","log","updateTokens","refresh","logout","clear","alert","text","id","passwordDiv","document","querySelector","msg","createElement","innerText","style","color","appendChild","setTimeout","removeChild","register","password2","email","forEach","editProfile","fourMinutes","interval","setInterval","clearInterval","contextData"],"sources":["C:/Users/tomas/Desktop/chess-masterclass/backend/chess_masterclass/frontend_chessmasterclass/src/context/UserContext.js"],"sourcesContent":["import React, {createContext, useEffect, useState} from 'react'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport alertMsg from '../utils/utlis'\r\n\r\n// create user context\r\nexport const UserContext = createContext()\r\n\r\n// create provider\r\nexport const UserContextProvider = ({children}) => {   \r\n\r\n    // lists with user/auth data\r\n    // check if there are tokens in local storage: if they are overwrite lists \r\n    let [authTokens, setAuthTokens] = useState(localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : [])\r\n    let [userInfo, setUserInfo] = useState(localStorage.getItem('authTokens') ? jwt_decode(JSON.parse(localStorage.getItem('authTokens')).access) : [])\r\n\r\n    // func to navigate (ie to homepage)\r\n    const navigate = useNavigate()\r\n\r\n    // func to login user: from form(onSubmit) in Login.js get username and pass and send it to API. In reverse get tokens (custom one have all needed data)\r\n    let login = async (e) => {\r\n        e.preventDefault()\r\n\r\n        // call to API\r\n        let response = await fetch('http://127.0.0.1:8000/api/token/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({'username': e.target.username.value, 'password': e.target.password.value}),\r\n        })\r\n        // get tokens in reponse\r\n        let data = await response.json()\r\n\r\n        // if status-200 then set Lists with data and save tokens in localstorage\r\n        if(response.status === 200){\r\n            setAuthTokens(data)\r\n            setUserInfo(jwt_decode(data.access))\r\n            localStorage.setItem('authTokens', JSON.stringify(data))   \r\n            navigate('/')\r\n        }else if(response.status === 401){\r\n            console.log('wrong pass or username')\r\n        }\r\n        else{\r\n            console.log('smth went wrong')\r\n        }\r\n    }\r\n\r\n    // update refresh token every 4 mins\r\n    let updateTokens = async () => {        \r\n        // call to API\r\n        let response = await fetch('http://127.0.0.1:8000/api/token/refresh/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({'refresh': authTokens?.refresh}),\r\n        })\r\n        // get tokens in reponse\r\n        let data = await response.json()\r\n\r\n        // if status-200 then set Lists with data and save tokens in localstorage\r\n        if(response.status === 200){\r\n            setAuthTokens(data)\r\n            setUserInfo(jwt_decode(data.access))\r\n            localStorage.setItem('authTokens', JSON.stringify(data))              \r\n        }\r\n        // else: smth is wrong and logout\r\n        else{\r\n            logout()\r\n        }\r\n    }\r\n\r\n    // logout\r\n    let logout = () => {\r\n        setAuthTokens([])\r\n        setUserInfo([])\r\n        localStorage.clear() \r\n        navigate('/')\r\n    }\r\n\r\n    // alerts\r\n    function alert(text, id){\r\n        let passwordDiv = document.querySelector(`#${id}`)\r\n        let msg = document.createElement('p')                \r\n        msg.innerText = text\r\n        msg.style.color = 'red'\r\n        passwordDiv.appendChild(msg)\r\n        setTimeout(() => {\r\n            passwordDiv.removeChild(msg);\r\n          }, 4000)\r\n    }\r\n\r\n    // register\r\n    let register = async (e) => {   \r\n        e.preventDefault()\r\n        if(e.target.username.value && e.target.password.value && e.target.password2.value && e.target.email.value){\r\n            if(e.target.password.value === e.target.password2.value){\r\n                let response = await fetch('http://127.0.0.1:8000/member/api/register/', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                        },\r\n                        body: JSON.stringify({  'username': e.target.username.value,\r\n                                                'password': e.target.password.value,\r\n                                                'email':    e.target.email.value,        \r\n                    })\r\n                    })\r\n                    let status = await response.json()\r\n                    console.log(status['username'])\r\n                    console.log(status)\r\n\r\n                    if(status.status === 200 || status.status === 201){\r\n                        navigate('/')\r\n                    }else if(status['username']){\r\n                        // alertMsg('username', status['username'][0], 'btn-submit-register')\r\n                        alert(status['username'][0], 'username')\r\n                    }else if(status['email']){\r\n                        alert(status['email'][0], 'email')\r\n                    }else if(status.password){\r\n                        status.password[0].forEach(msg => {\r\n                            alert(msg, 'email')\r\n                        });                        \r\n                    }\r\n                    else{\r\n                        console.log('smth went wrong..')\r\n                    }\r\n            }else{\r\n                alert('Passwords are not the same.', 'password2')\r\n            }                                                       \r\n                \r\n        }else{\r\n            alert('Please fill all fields.', 'submit-field')\r\n        }\r\n    }\r\n\r\n    // edit profile\r\n    let editProfile = async (e) => {\r\n        \r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let fourMinutes = 1000 * 4 * 60\r\n        let interval = setInterval(() => {\r\n            updateTokens()\r\n        }, fourMinutes)\r\n        return () => clearInterval(interval)\r\n    }, [])\r\n\r\n    // collection of data to hook between components\r\n    let contextData = {\r\n        // data\r\n        userInfo: userInfo,\r\n\r\n        // functions\r\n        \r\n        register: register,\r\n        login: login,\r\n        logout: logout,\r\n    }\r\n\r\n    // provider DOM\r\n    return(\r\n        <UserContext.Provider value={contextData}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    )\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}